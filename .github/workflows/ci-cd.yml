name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  FASTAPI_IMAGE_NAME: ${{ github.repository }}/backtest-be-fast
  SPRING_IMAGE_NAME: ${{ github.repository }}/backtest-be-spring
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/backtest-fe

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: backtest_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backtest_fe/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backtest_be_fast/requirements.txt

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # Frontend Tests
    - name: Install frontend dependencies
      working-directory: ./backtest_fe
      run: npm ci

    - name: Run frontend tests
      working-directory: ./backtest_fe
      run: npm run test:run

    - name: Run frontend lint
      working-directory: ./backtest_fe
      run: npm run lint

    # FastAPI Tests
    - name: Install FastAPI dependencies
      working-directory: ./backtest_be_fast
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run FastAPI tests
      working-directory: ./backtest_be_fast
      run: |
        # Add test environment variables
        export DATABASE_HOST=localhost
        export DATABASE_PORT=3306
        export DATABASE_USER=root
        export DATABASE_PASSWORD=test_password
        export DATABASE_NAME=backtest_test
        export REDIS_PASSWORD=""
        export SECRET_KEY="test-secret-key-for-ci-that-is-long-enough-for-hs512-algorithm-requirements-abcdefghijklmnopqrstuvwxyz"
        # Run tests (add when tests are implemented)
        # python -m pytest tests/

    # Spring Boot Tests
    - name: Run Spring Boot tests
      working-directory: ./backtest_be_spring
      run: |
        chmod +x ./gradlew
        ./gradlew test
      env:
        SPRING_DATASOURCE_HOST: localhost
        SPRING_DATASOURCE_PORT: 3306
        SPRING_DATASOURCE_USERNAME: root
        SPRING_DATASOURCE_PASSWORD: test_password
        APP_SECURITY_JWT_SECRET: test-secret-key-for-ci-that-is-long-enough-for-hs512-algorithm-requirements-abcdefghijklmnopqrstuvwxyz
        SPRING_REDIS_HOST: localhost
        SPRING_REDIS_PORT: 6379
        SPRING_REDIS_PASSWORD: ""

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata for FastAPI
      id: meta-fastapi
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FASTAPI_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Spring Boot
      id: meta-spring
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.SPRING_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push FastAPI image
      uses: docker/build-push-action@v5
      with:
        context: ./backtest_be_fast
        file: ./backtest_be_fast/Dockerfile
        push: true
        tags: ${{ steps.meta-fastapi.outputs.tags }}
        labels: ${{ steps.meta-fastapi.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Spring Boot image
      uses: docker/build-push-action@v5
      with:
        context: ./backtest_be_spring
        file: ./backtest_be_spring/Dockerfile
        push: true
        tags: ${{ steps.meta-spring.outputs.tags }}
        labels: ${{ steps.meta-spring.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./backtest_fe
        file: ./backtest_fe/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        port: ${{ secrets.DEPLOY_PORT }}
        script: |
          # Navigate to deployment directory
          cd ${{ secrets.DEPLOY_PATH }}
          
          # GitHub Container Registry Î°úÍ∑∏Ïù∏
          echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
          
          # Pull latest code for compose files
          git pull origin main
          
          # Pull latest images
          docker pull ghcr.io/capstone-backtest/backtest/backtest-be-fast:latest
          docker pull ghcr.io/capstone-backtest/backtest/backtest-be-spring:latest  
          docker pull ghcr.io/capstone-backtest/backtest/backtest-fe:latest
          
          # Update docker-compose with new images and restart
          docker compose -f compose/compose.prod.yaml down
          docker compose -f compose/compose.prod.yaml up -d
          
          # Clean up old images
          docker system prune -f
          
          # Health check
          sleep 30
          echo "üîç Running health checks..."
          if curl -f http://localhost:8000/health > /dev/null 2>&1; then
            echo "‚úÖ FastAPI is healthy"
          else
            echo "‚ùå FastAPI health check failed"
          fi
          
          if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
            echo "‚úÖ Spring Boot is healthy"
          else
            echo "‚ùå Spring Boot health check failed"
          fi
          
          if curl -f http://localhost/ > /dev/null 2>&1; then
            echo "‚úÖ Frontend is healthy"
          else
            echo "‚ùå Frontend health check failed"
          fi

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}