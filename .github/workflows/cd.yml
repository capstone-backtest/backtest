name: CD

# Trigger only when CI workflow completes successfully on the main branch
on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  deploy:
    name: Build, Push Images and Deploy
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata for FastAPI
      id: meta-fastapi
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/backtest-be-fast
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Spring Boot
      id: meta-spring
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/backtest-be-spring
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/backtest-fe
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push FastAPI image
      uses: docker/build-push-action@v5
      with:
        context: ./backtest_be_fast
        file: ./backtest_be_fast/Dockerfile
        push: true
        tags: ${{ steps.meta-fastapi.outputs.tags }}
        labels: ${{ steps.meta-fastapi.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Spring Boot image
      uses: docker/build-push-action@v5
      with:
        context: ./backtest_be_spring
        file: ./backtest_be_spring/Dockerfile
        push: true
        tags: ${{ steps.meta-spring.outputs.tags }}
        labels: ${{ steps.meta-spring.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./backtest_fe
        file: ./backtest_fe/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        port: ${{ secrets.DEPLOY_PORT }}
        script: |
          cd ${{ secrets.DEPLOY_PATH }}
          echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
          git pull origin main
          docker pull ghcr.io/${{ github.repository }}/backtest-be-fast:latest
          docker pull ghcr.io/${{ github.repository }}/backtest-be-spring:latest
          docker pull ghcr.io/${{ github.repository }}/backtest-fe:latest
          docker compose -f compose/compose.prod.yaml down
          docker compose -f compose/compose.prod.yaml up -d
          docker system prune -f
          sleep 30
          echo "Running health checks..."
          if curl -f http://localhost:8000/health > /dev/null 2>&1; then
            echo "FastAPI is healthy"
          else
            echo "FastAPI health check failed"
          fi
          if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
            echo "Spring Boot is healthy"
          else
            echo "Spring Boot health check failed"
          fi
          if curl -f http://localhost/ > /dev/null 2>&1; then
            echo "Frontend is healthy"
          else
            echo "Frontend health check failed"
          fi
