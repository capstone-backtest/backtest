services:
  mysql:
    image: mysql:8.0
    container_name: bt_mysql_prod
    restart: unless-stopped
    command: ["--default-authentication-plugin=mysql_native_password"]
    networks:
      - backtest-net
    env_file:
      - ${BACKTEST_ENV_FILE:-../.env}
    volumes:
      - ../database:/docker-entrypoint-initdb.d:ro
      - backtest_db_data_prod:/var/lib/mysql
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p\"$$MYSQL_ROOT_PASSWORD\" >/dev/null 2>&1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: bt_redis_prod
    restart: unless-stopped
    # Do not bind Redis to the host to avoid port conflicts (6379 often used)
    command: sh -c 'redis-server --requirepass "$$REDIS_PASSWORD"'
    volumes:
      - backtest_redis_data_prod:/data
    networks:
      - backtest-net
    env_file:
      - ${BACKTEST_ENV_FILE:-../.env}
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a \"$$REDIS_PASSWORD\" ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5

  backtest_be_fast:
    image: ghcr.io/capstone-backtest/backtest/backtest-be-fast:latest
    container_name: backtest_be_fast_prod
    restart: unless-stopped
    networks:
      - backtest-net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    env_file:
      - ${BACKTEST_ENV_FILE:-../.env}
    environment:
      - DATABASE_HOST=mysql
      - DATABASE_PORT=3306
      - DEBUG=false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backtest_be_spring:
    image: ghcr.io/capstone-backtest/backtest/backtest-be-spring:latest
    container_name: backtest_be_spring_prod
    restart: unless-stopped
    networks:
      - backtest-net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8082:8080"
    env_file:
      - ${BACKTEST_ENV_FILE:-../.env}
    environment:
      - SPRING_DATASOURCE_HOST=mysql
      - SPRING_DATASOURCE_PORT=3306
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/stock_community?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME:-root}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_REDIS_PASSWORD=${REDIS_PASSWORD}
      - SPRING_PROFILES_ACTIVE=prod
    healthcheck:
      # Use TCP check instead of curl (not installed in runtime image)
      test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/8080' "]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  backtest_fe:
    image: ghcr.io/capstone-backtest/backtest/backtest-fe:latest
    container_name: backtest_fe_prod
    restart: unless-stopped
    networks:
      - backtest-net
    depends_on:
      backtest_be_fast:
        condition: service_healthy
      backtest_be_spring:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - ${BACKTEST_ENV_FILE:-../.env}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  backtest_db_data_prod:
  backtest_redis_data_prod:

networks:
  backtest-net:
    name: backtest-network-prod
    driver: bridge
